一.理解对象

1.基于Object对象
var person = new Object();
person.name = 'My Name';
person.age = 18;
person.getName = function(){
    return this.name;
}

2.对象字面量方式（比较清楚的查找对象包含的属性及方法）
var person = {
    name : 'My name',
    age : 18,
    getName : function(){
        return this.name;
    }
}

二.对象属性类型
1、数据属性：
   数据属性指包含一个数据值的位置，可在该位置读取或写入值，该属性有4个供述其行为的特性：
 [[configurable]]:表示能否使用delete操作符删除从而重新定义，或能否修改为访问器属性。默认为true;
 [[Enumberable]]:表示是否可通过for-in循环返回属性。默认true;
 [[Writable]]:表示是否可修改属性的值。默认true;
 [[Value]]:包含该属性的数据值。读取/写入都是该值。默认为undefined;
 要修改对象属性的默认特征（默认都为true)，可调用Object.defineProperty()方法，它接收三个参数：属性所在对象，属性名和一个描述符对象（必须是：configurable、enumberable、writable和value，可设置一个或多个值）。
 
2、访问器属性：
 它主要包括一对getter和setter函数，在读取访问器属性时，会调用getter返回有效值；写入访问器属性时，调用setter，写入新值；该属性有以下4个特征：
 [[Configurable]]:是否可通过delete操作符删除重新定义属性；
 [[Numberable]]:是否可通过for-in循环查找该属性；
 [[Get]]:读取属性时调用，默认：undefined;
 [[Set]]:写入属性时调用，默认：undefined;
 访问器属性不能直接定义，必须使用defineProperty()来定义

Object.defineProperties()方法，可以用来一次性定义多个属性的特性；

Object.getOwnPropertyDescriptor()方法可以取得给定属性的特性：
	var descriptor = Object.getOwnPropertyDescriptor(person,'_age');
	alert(descriptor.value);//19
   对于数据属性，可以取得：configurable,enumberable,writable和value；
   对于访问器属性，可以取得：configurable,enumberable,get和set

三.创建对象
1、工厂模式
function createPerson(name, age, job) {
    var o = new Object();
    o.name = name;
    o.age = age;
    o.job = job;
    o.getName = function () {
        return this.name;
    }
    return o;//使用return返回生成的对象实例
}
var person = createPerson('Jack', 19, 'SoftWare Engineer');
 创建对象交给一个工厂方法来实现，可以传递参数，但主要缺点是无法识别对象类型，因为创建对象都是使用Object的原生构造函数来完成的。

2、构造函数模式
function Person(name,age,job){
    this.name = name;
    this.age = age;
    this.job = job;
    this.getName = function () {
        return this.name;
    }
}
var person1 = new Person('Jack', 19, 'SoftWare Engineer');
var person2 = new Person('Liye', 23, 'Mechanical Engineer');
 使用自定义的构造函数（与普通函数一样，只是用它来创建对象），定义对象类型（如：Person）的属性和方法。它与工厂方法区别在于：
	没有显式地创建对象；
	直接将属性和方法赋值给this对象；
	没有return语句；


































typeof
instansof

constructor
prototype

